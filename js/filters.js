document.addEventListener("DOMContentLoaded", () => {
  const filterBtn = document.getElementById("filter");
  if (!filterBtn) return;

  // Capture original renderer and storage.get
  const originalRender = window.renderTickets;
  const originalStorageGet = window.storage && window.storage.get;

  // parse filters from URL
  function parseFiltersFromURL() {
    const params = new URLSearchParams(window.location.search);
    if (!params.has("filters")) return [];
    return params.get("filters").split(",").map(rule => {
      const [col, rel, ...rest] = rule.split(":");
      const val = rest.join(":"); 
      return { column: col, relation: rel, value: decodeURIComponent(val) };
    });
  }

  //  parse sort from URL
  function parseSortFromURL() {
    const params = new URLSearchParams(window.location.search);
    if (!params.has("sortBy")) return [];
    return params.get("sortBy").split(",").map(r => {
      const [column, order] = r.split(":");
      return { column, order };
    });
  }

  // Apply filtering rules to a tickets array
  function applyFilteringLocal(tickets, rules) {
    if (!rules || rules.length === 0) return tickets;
    return tickets.filter(ticket =>
      rules.every(f => {
        const fieldRaw = ticket[f.column];
        const val = (fieldRaw == null ? "" : String(fieldRaw)).toLowerCase();
        const filterVal = String(f.value || "").toLowerCase();
        switch (f.relation) {
          case "equals": return val === filterVal;
          case "contains": return val.includes(filterVal);
          case "starts": return val.startsWith(filterVal);
          case "ends": return val.endsWith(filterVal);
          default: return true;
        }
      })
    );
  }

  // Apply sorting rules to a tickets array
  function applySortingLocal(tickets, rules) {
    if (!rules || rules.length === 0) return tickets;
    return [...tickets].sort((a, b) => {
      for (const r of rules) {
        let va = a[r.column];
        let vb = b[r.column];

        // normalize
        if (r.column === "date") {
          va = va ? new Date(va).getTime() : -Infinity;
          vb = vb ? new Date(vb).getTime() : -Infinity;
        } else {
          va = (va == null ? "" : String(va)).toLowerCase();
          vb = (vb == null ? "" : String(vb)).toLowerCase();
        }

        if (va < vb) return r.order === "asc" ? -1 : 1;
        if (va > vb) return r.order === "asc" ? 1 : -1;
        // else continue to next rule
      }
      return 0;
    });
  }

  // Replace storage.get temporarily, call originalRender, restore storage.get
  function renderWithFilteredSorted(ticketsArray) {
    if (!window.storage || typeof originalRender !== "function") {
      // fallback â€” call originalRender if present
      if (typeof originalRender === "function") {
        originalRender();
      }
      return;
    }
    const realGet = window.storage.get;
    try {
      window.storage.get = () => ticketsArray;
      originalRender();
    } finally {
      window.storage.get = realGet;
    }
  }

  // Re-render based on current URL params
  function reRenderFromParams() {
    const all = typeof originalStorageGet === "function" ? originalStorageGet() : (window.storage ? window.storage.get() : []);
    const filters = parseFiltersFromURL();
    const sorts = parseSortFromURL();
    const filtered = applyFilteringLocal(all, filters);
    const sorted = applySortingLocal(filtered, sorts);
    renderWithFilteredSorted(sorted);
  }

  // Listen to popstate so back/forward updates
  window.addEventListener("popstate", reRenderFromParams);

  filterBtn.addEventListener("click", () => {
    showModal({
      title: `
          <svg width="130" height="25" viewBox="0 0 130 25" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M6 13H18V11H6M3 6V8H21V6M10 18H14V16H10V18Z" fill="#DB8A74"/>
          <path d="M30.7275 7.04688V17H29.0117V7.04688H30.7275ZM34.7881 11.4014V12.7617H30.29V11.4014H34.7881ZM35.3555 7.04688V8.41406H30.29V7.04688H35.3555ZM38.4223 9.60352V17H36.768V9.60352H38.4223ZM36.6586 7.66211C36.6586 7.41146 36.7406 7.2041 36.9047 7.04004C37.0733 6.87142 37.3057 6.78711 37.602 6.78711C37.8936 6.78711 38.1238 6.87142 38.2924 7.04004C38.461 7.2041 38.5453 7.41146 38.5453 7.66211C38.5453 7.9082 38.461 8.11328 38.2924 8.27734C38.1238 8.44141 37.8936 8.52344 37.602 8.52344C37.3057 8.52344 37.0733 8.44141 36.9047 8.27734C36.7406 8.11328 36.6586 7.9082 36.6586 7.66211ZM42.0906 6.5V17H40.4363V6.5H42.0906ZM47.3859 9.60352V10.8066H43.216V9.60352H47.3859ZM44.4191 7.79199H46.0666V14.9561C46.0666 15.1839 46.0985 15.3594 46.1623 15.4824C46.2307 15.6009 46.3241 15.6807 46.4426 15.7217C46.5611 15.7627 46.7001 15.7832 46.8596 15.7832C46.9735 15.7832 47.0829 15.7764 47.1877 15.7627C47.2925 15.749 47.3768 15.7354 47.4406 15.7217L47.4475 16.9795C47.3107 17.0205 47.1512 17.057 46.9689 17.0889C46.7912 17.1208 46.5861 17.1367 46.3537 17.1367C45.9755 17.1367 45.6405 17.0706 45.3488 16.9385C45.0572 16.8018 44.8293 16.5807 44.6652 16.2754C44.5012 15.9701 44.4191 15.5645 44.4191 15.0586V7.79199ZM52.0182 17.1367C51.4713 17.1367 50.9768 17.0479 50.5348 16.8701C50.0973 16.6878 49.7236 16.4349 49.4137 16.1113C49.1083 15.7878 48.8736 15.4072 48.7096 14.9697C48.5455 14.5322 48.4635 14.0605 48.4635 13.5547V13.2812C48.4635 12.7025 48.5478 12.1784 48.7164 11.709C48.885 11.2396 49.1197 10.8385 49.4205 10.5059C49.7213 10.1686 50.0768 9.91113 50.4869 9.7334C50.8971 9.55566 51.3414 9.4668 51.8199 9.4668C52.3486 9.4668 52.8111 9.55566 53.2076 9.7334C53.6041 9.91113 53.9322 10.1618 54.192 10.4854C54.4563 10.8044 54.6523 11.1849 54.7799 11.627C54.912 12.069 54.9781 12.5566 54.9781 13.0898V13.7939H49.2633V12.6113H53.3512V12.4814C53.3421 12.1852 53.2828 11.9072 53.1734 11.6475C53.0686 11.3877 52.9068 11.1781 52.6881 11.0186C52.4693 10.859 52.1777 10.7793 51.8131 10.7793C51.5396 10.7793 51.2958 10.8385 51.0816 10.957C50.872 11.071 50.6965 11.2373 50.5553 11.4561C50.414 11.6748 50.3046 11.9391 50.2271 12.249C50.1542 12.5544 50.1178 12.8984 50.1178 13.2812V13.5547C50.1178 13.8783 50.1611 14.179 50.2477 14.457C50.3388 14.7305 50.471 14.9697 50.6441 15.1748C50.8173 15.3799 51.027 15.5417 51.273 15.6602C51.5191 15.7741 51.7994 15.8311 52.1139 15.8311C52.5104 15.8311 52.8635 15.7513 53.1734 15.5918C53.4833 15.4323 53.7522 15.2067 53.9801 14.915L54.8482 15.7559C54.6887 15.9883 54.4814 16.2116 54.2262 16.4258C53.971 16.6354 53.6588 16.8063 53.2896 16.9385C52.9251 17.0706 52.5012 17.1367 52.0182 17.1367ZM58.0176 11.0117V17H56.3701V9.60352H57.9424L58.0176 11.0117ZM60.2803 9.55566L60.2666 11.0869C60.1663 11.0687 60.057 11.055 59.9385 11.0459C59.8245 11.0368 59.7106 11.0322 59.5967 11.0322C59.3141 11.0322 59.0658 11.0732 58.8516 11.1553C58.6374 11.2327 58.4574 11.3467 58.3115 11.4971C58.1702 11.6429 58.0609 11.8206 57.9834 12.0303C57.9059 12.2399 57.8604 12.4746 57.8467 12.7344L57.4707 12.7617C57.4707 12.2969 57.5163 11.8662 57.6074 11.4697C57.6986 11.0732 57.8353 10.7246 58.0176 10.4238C58.2044 10.123 58.4368 9.88835 58.7148 9.71973C58.9974 9.55111 59.3232 9.4668 59.6924 9.4668C59.7926 9.4668 59.8997 9.47591 60.0137 9.49414C60.1322 9.51237 60.221 9.53288 60.2803 9.55566ZM68.9295 7.04688V17H67.2273V7.04688H68.9295ZM72.0535 7.04688V8.41406H64.1307V7.04688H72.0535ZM76.5559 15.5166V11.9893C76.5559 11.7249 76.508 11.4971 76.4123 11.3057C76.3166 11.1143 76.1708 10.9661 75.9748 10.8613C75.7834 10.7565 75.5419 10.7041 75.2502 10.7041C74.9813 10.7041 74.7489 10.7497 74.5529 10.8408C74.357 10.932 74.2043 11.055 74.0949 11.21C73.9855 11.3649 73.9309 11.5404 73.9309 11.7363H72.2902C72.2902 11.4447 72.3609 11.1621 72.5021 10.8887C72.6434 10.6152 72.8485 10.3714 73.1174 10.1572C73.3863 9.94303 73.7076 9.77441 74.0812 9.65137C74.4549 9.52832 74.8742 9.4668 75.3391 9.4668C75.8951 9.4668 76.3872 9.56022 76.8156 9.74707C77.2486 9.93392 77.5881 10.2165 77.8342 10.5947C78.0848 10.9684 78.2102 11.4378 78.2102 12.0029V15.291C78.2102 15.6283 78.2329 15.9313 78.2785 16.2002C78.3286 16.4645 78.3993 16.6947 78.4904 16.8906V17H76.802C76.7245 16.8223 76.663 16.5967 76.6174 16.3232C76.5764 16.0452 76.5559 15.7764 76.5559 15.5166ZM76.7951 12.502L76.8088 13.5205H75.6262C75.3208 13.5205 75.052 13.5501 74.8195 13.6094C74.5871 13.6641 74.3934 13.7461 74.2385 13.8555C74.0835 13.9648 73.9673 14.097 73.8898 14.252C73.8124 14.4069 73.7736 14.5824 73.7736 14.7783C73.7736 14.9743 73.8192 15.1543 73.9104 15.3184C74.0015 15.4779 74.1337 15.6032 74.3068 15.6943C74.4846 15.7855 74.6988 15.8311 74.9494 15.8311C75.2867 15.8311 75.5806 15.7627 75.8312 15.626C76.0865 15.4847 76.287 15.3138 76.4328 15.1133C76.5786 14.9082 76.6561 14.7145 76.6652 14.5322L77.1984 15.2637C77.1437 15.4505 77.0503 15.651 76.9182 15.8652C76.786 16.0794 76.6128 16.2845 76.3986 16.4805C76.189 16.6719 75.9361 16.8291 75.6398 16.9521C75.3482 17.0752 75.0109 17.1367 74.6281 17.1367C74.1451 17.1367 73.7144 17.041 73.3361 16.8496C72.9579 16.6536 72.6617 16.3916 72.4475 16.0635C72.2333 15.7308 72.1262 15.3548 72.1262 14.9355C72.1262 14.5436 72.1991 14.1973 72.3449 13.8965C72.4953 13.5911 72.7141 13.3359 73.0012 13.1309C73.2928 12.9258 73.6483 12.7708 74.0676 12.666C74.4868 12.5566 74.9654 12.502 75.5031 12.502H76.7951ZM80.0396 6.5H81.6871V15.4209L81.5299 17H80.0396V6.5ZM86.5133 13.2334V13.377C86.5133 13.9238 86.4518 14.4274 86.3287 14.8877C86.2102 15.3434 86.0279 15.7399 85.7818 16.0771C85.5403 16.4144 85.2395 16.6764 84.8795 16.8633C84.524 17.0456 84.1116 17.1367 83.6422 17.1367C83.1819 17.1367 82.7809 17.0501 82.4391 16.877C82.0973 16.7038 81.8102 16.4577 81.5777 16.1387C81.3499 15.8197 81.1653 15.4391 81.024 14.9971C80.8827 14.555 80.7825 14.0674 80.7232 13.5342V13.0762C80.7825 12.5384 80.8827 12.0508 81.024 11.6133C81.1653 11.1712 81.3499 10.7907 81.5777 10.4717C81.8102 10.1481 82.095 9.89974 82.4322 9.72656C82.774 9.55339 83.1728 9.4668 83.6285 9.4668C84.1025 9.4668 84.5195 9.55794 84.8795 9.74023C85.2441 9.92253 85.5471 10.1823 85.7887 10.5195C86.0302 10.8522 86.2102 11.2487 86.3287 11.709C86.4518 12.1693 86.5133 12.6774 86.5133 13.2334ZM84.8658 13.377V13.2334C84.8658 12.9007 84.8385 12.5885 84.7838 12.2969C84.7291 12.0007 84.638 11.7409 84.5104 11.5176C84.3873 11.2943 84.2187 11.1188 84.0045 10.9912C83.7949 10.859 83.5328 10.793 83.2184 10.793C82.9267 10.793 82.676 10.8431 82.4664 10.9434C82.2568 11.0436 82.0813 11.1803 81.94 11.3535C81.7988 11.5267 81.6871 11.7272 81.6051 11.9551C81.5276 12.1829 81.4752 12.429 81.4479 12.6934V13.9307C81.4889 14.2725 81.5755 14.5869 81.7076 14.874C81.8443 15.1566 82.0357 15.3844 82.2818 15.5576C82.5279 15.7262 82.8447 15.8105 83.232 15.8105C83.5374 15.8105 83.7949 15.749 84.0045 15.626C84.2141 15.5029 84.3805 15.332 84.5035 15.1133C84.6311 14.89 84.7223 14.6302 84.777 14.334C84.8362 14.0378 84.8658 13.7188 84.8658 13.377ZM89.7715 6.5V17H88.1172V6.5H89.7715ZM94.9369 17.1367C94.39 17.1367 93.8956 17.0479 93.4535 16.8701C93.016 16.6878 92.6423 16.4349 92.3324 16.1113C92.0271 15.7878 91.7924 15.4072 91.6283 14.9697C91.4643 14.5322 91.3822 14.0605 91.3822 13.5547V13.2812C91.3822 12.7025 91.4665 12.1784 91.6352 11.709C91.8038 11.2396 92.0385 10.8385 92.3393 10.5059C92.64 10.1686 92.9955 9.91113 93.4057 9.7334C93.8158 9.55566 94.2602 9.4668 94.7387 9.4668C95.2673 9.4668 95.7299 9.55566 96.1264 9.7334C96.5229 9.91113 96.851 10.1618 97.1107 10.4854C97.3751 10.8044 97.571 11.1849 97.6986 11.627C97.8308 12.069 97.8969 12.5566 97.8969 13.0898V13.7939H92.182V12.6113H96.2699V12.4814C96.2608 12.1852 96.2016 11.9072 96.0922 11.6475C95.9874 11.3877 95.8256 11.1781 95.6068 11.0186C95.3881 10.859 95.0964 10.7793 94.7318 10.7793C94.4584 10.7793 94.2146 10.8385 94.0004 10.957C93.7908 11.071 93.6153 11.2373 93.474 11.4561C93.3327 11.6748 93.2234 11.9391 93.1459 12.249C93.073 12.5544 93.0365 12.8984 93.0365 13.2812V13.5547C93.0365 13.8783 93.0798 14.179 93.1664 14.457C93.2576 14.7305 93.3897 14.9697 93.5629 15.1748C93.7361 15.3799 93.9457 15.5417 94.1918 15.6602C94.4379 15.7741 94.7182 15.8311 95.0326 15.8311C95.4291 15.8311 95.7823 15.7513 96.0922 15.5918C96.4021 15.4323 96.671 15.2067 96.8988 14.915L97.767 15.7559C97.6075 15.9883 97.4001 16.2116 97.1449 16.4258C96.8897 16.6354 96.5775 16.8063 96.2084 16.9385C95.8438 17.0706 95.42 17.1367 94.9369 17.1367Z" fill="#DB8A74"/>
          </svg>
      `,
      body: `
        <div id="filter-body" class="filter-body"></div>
        <button id="add-filter-btn" style="margin-top:10px;  background:none; border:none; cursor:pointer ">
          <svg width="83" height="16" viewBox="0 0 83 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M14 5.33333H2V4H14V5.33333ZM9.20667 10.6667H6.66667V12H8.72667C8.80667 11.52 8.97333 11.0733 9.20667 10.6667ZM12 7.33333H4V8.66667H12V7.33333ZM12 10V12H10V13.3333H12V15.3333H13.3333V13.3333H15.3333V12H13.3333V10H12Z" fill="#5856D6"/>
          <path d="M28.2628 12.5H26.2855L29.2983 3.77273H31.6761L34.6847 12.5H32.7074L30.5213 5.76705H30.4531L28.2628 12.5ZM28.1392 9.0696H32.8097V10.5099H28.1392V9.0696ZM37.8082 12.6065C37.3111 12.6065 36.8608 12.4787 36.4574 12.223C36.0568 11.9645 35.7386 11.5852 35.5028 11.0852C35.2699 10.5824 35.1534 9.96591 35.1534 9.2358C35.1534 8.4858 35.2741 7.86222 35.5156 7.36506C35.7571 6.86506 36.0781 6.49148 36.4787 6.24432C36.8821 5.99432 37.3239 5.86932 37.804 5.86932C38.1705 5.86932 38.4759 5.93182 38.7202 6.05682C38.9673 6.17898 39.1662 6.33239 39.3168 6.51705C39.4702 6.69886 39.5866 6.87784 39.6662 7.05398H39.7216V3.77273H41.5327V12.5H39.7429V11.4517H39.6662C39.581 11.6335 39.4602 11.8139 39.304 11.9929C39.1506 12.169 38.9503 12.3153 38.7031 12.4318C38.4588 12.5483 38.1605 12.6065 37.8082 12.6065ZM38.3835 11.1619C38.6761 11.1619 38.9233 11.0824 39.125 10.9233C39.3295 10.7614 39.4858 10.5355 39.5938 10.2457C39.7045 9.95597 39.7599 9.61648 39.7599 9.22727C39.7599 8.83807 39.706 8.5 39.598 8.21307C39.4901 7.92614 39.3338 7.70455 39.1293 7.5483C38.9247 7.39205 38.6761 7.31392 38.3835 7.31392C38.0852 7.31392 37.8338 7.39489 37.6293 7.55682C37.4247 7.71875 37.2699 7.94318 37.1648 8.23011C37.0597 8.51705 37.0071 8.84943 37.0071 9.22727C37.0071 9.60795 37.0597 9.9446 37.1648 10.2372C37.2727 10.527 37.4276 10.7543 37.6293 10.919C37.8338 11.081 38.0852 11.1619 38.3835 11.1619ZM45.4371 12.6065C44.94 12.6065 44.4897 12.4787 44.0863 12.223C43.6857 11.9645 43.3675 11.5852 43.1317 11.0852C42.8988 10.5824 42.7823 9.96591 42.7823 9.2358C42.7823 8.4858 42.9031 7.86222 43.1445 7.36506C43.386 6.86506 43.707 6.49148 44.1076 6.24432C44.511 5.99432 44.9528 5.86932 45.4329 5.86932C45.7994 5.86932 46.1048 5.93182 46.3491 6.05682C46.5962 6.17898 46.7951 6.33239 46.9457 6.51705C47.0991 6.69886 47.2156 6.87784 47.2951 7.05398H47.3505V3.77273H49.1616V12.5H47.3718V11.4517H47.2951C47.2099 11.6335 47.0891 11.8139 46.9329 11.9929C46.7795 12.169 46.5792 12.3153 46.332 12.4318C46.0877 12.5483 45.7894 12.6065 45.4371 12.6065ZM46.0124 11.1619C46.305 11.1619 46.5522 11.0824 46.7539 10.9233C46.9585 10.7614 47.1147 10.5355 47.2227 10.2457C47.3335 9.95597 47.3888 9.61648 47.3888 9.22727C47.3888 8.83807 47.3349 8.5 47.2269 8.21307C47.119 7.92614 46.9627 7.70455 46.7582 7.5483C46.5536 7.39205 46.305 7.31392 46.0124 7.31392C45.7141 7.31392 45.4627 7.39489 45.2582 7.55682C45.0536 7.71875 44.8988 7.94318 44.7937 8.23011C44.6886 8.51705 44.636 8.84943 44.636 9.22727C44.636 9.60795 44.6886 9.9446 44.7937 10.2372C44.9016 10.527 45.0565 10.7543 45.2582 10.919C45.4627 11.081 45.7141 11.1619 46.0124 11.1619ZM53.4656 12.5V3.77273H59.244V5.29403H55.3107V7.37358H58.8604V8.89489H55.3107V12.5H53.4656ZM60.451 12.5V5.95455H62.2663V12.5H60.451ZM61.3629 5.1108C61.093 5.1108 60.8615 5.02131 60.6683 4.84233C60.478 4.66051 60.3828 4.44318 60.3828 4.19034C60.3828 3.94034 60.478 3.72585 60.6683 3.54688C60.8615 3.36506 61.093 3.27415 61.3629 3.27415C61.6328 3.27415 61.8629 3.36506 62.0533 3.54688C62.2464 3.72585 62.343 3.94034 62.343 4.19034C62.343 4.44318 62.2464 4.66051 62.0533 4.84233C61.8629 5.02131 61.6328 5.1108 61.3629 5.1108ZM65.5359 3.77273V12.5H63.7205V3.77273H65.5359ZM70.4716 5.95455V7.31818H66.5298V5.95455H70.4716ZM67.4247 4.38636H69.2401V10.4886C69.2401 10.6562 69.2656 10.7869 69.3168 10.8807C69.3679 10.9716 69.4389 11.0355 69.5298 11.0724C69.6236 11.1094 69.7315 11.1278 69.8537 11.1278C69.9389 11.1278 70.0241 11.1207 70.1094 11.1065C70.1946 11.0895 70.2599 11.0767 70.3054 11.0682L70.5909 12.419C70.5 12.4474 70.3722 12.4801 70.2074 12.517C70.0426 12.5568 69.8423 12.581 69.6065 12.5895C69.169 12.6065 68.7855 12.5483 68.456 12.4148C68.1293 12.2812 67.875 12.0739 67.6932 11.7926C67.5114 11.5114 67.4219 11.1562 67.4247 10.7273V4.38636ZM74.5668 12.6278C73.8935 12.6278 73.3139 12.4915 72.8281 12.2188C72.3452 11.9432 71.973 11.554 71.7116 11.0511C71.4503 10.5455 71.3196 9.94744 71.3196 9.2571C71.3196 8.58381 71.4503 7.9929 71.7116 7.48438C71.973 6.97585 72.3409 6.57955 72.8153 6.29545C73.2926 6.01136 73.8523 5.86932 74.4943 5.86932C74.9261 5.86932 75.3281 5.93892 75.7003 6.07812C76.0753 6.21449 76.402 6.42045 76.6804 6.69602C76.9616 6.97159 77.1804 7.31818 77.3366 7.7358C77.4929 8.15057 77.571 8.63636 77.571 9.19318V9.69176H72.044V8.56676H75.8622C75.8622 8.3054 75.8054 8.07386 75.6918 7.87216C75.5781 7.67045 75.4205 7.51278 75.2188 7.39915C75.0199 7.28267 74.7884 7.22443 74.5241 7.22443C74.2486 7.22443 74.0043 7.28835 73.7912 7.41619C73.581 7.54119 73.4162 7.71023 73.2969 7.9233C73.1776 8.13352 73.1165 8.3679 73.1136 8.62642V9.69602C73.1136 10.0199 73.1733 10.2997 73.2926 10.5355C73.4148 10.7713 73.5866 10.9531 73.8082 11.081C74.0298 11.2088 74.2926 11.2727 74.5966 11.2727C74.7983 11.2727 74.983 11.2443 75.1506 11.1875C75.3182 11.1307 75.4616 11.0455 75.581 10.9318C75.7003 10.8182 75.7912 10.679 75.8537 10.5142L77.5327 10.625C77.4474 11.0284 77.2727 11.3807 77.0085 11.6818C76.7472 11.9801 76.4091 12.2131 75.9943 12.3807C75.5824 12.5455 75.1065 12.6278 74.5668 12.6278ZM78.7557 12.5V5.95455H80.5156V7.09659H80.5838C80.7031 6.69034 80.9034 6.38352 81.1847 6.17614C81.4659 5.96591 81.7898 5.8608 82.1562 5.8608C82.2472 5.8608 82.3452 5.86648 82.4503 5.87784C82.5554 5.8892 82.6477 5.90483 82.7273 5.92472V7.53551C82.642 7.50994 82.5241 7.48722 82.3736 7.46733C82.223 7.44744 82.0852 7.4375 81.9602 7.4375C81.6932 7.4375 81.4545 7.49574 81.2443 7.61222C81.0369 7.72585 80.8722 7.88494 80.75 8.08949C80.6307 8.29403 80.571 8.52983 80.571 8.79688V12.5H78.7557Z" fill="#5856D6"/>
          </svg>
        </button>
      `,
      footer: `
        <button id="reset-filter" class="cancel">Reset Filter</button>
        <button id="submit-filter" class="success-modal-close-btn">Submit</button>
      `
    });

    const filterBody = document.getElementById("filter-body");
    const addBtn = document.getElementById("add-filter-btn");

    function addFilterRow(col = "", rel = "contains", val = "") {
      const row = document.createElement("div");
      row.className = "filter-row";
      row.style.display = "flex";
      row.style.alignItems = "center";
      row.style.gap = "8px";
      row.style.marginBottom = "8px";

      row.innerHTML = `
        <select class="filter-column" style="flex:1; padding:6px;">
          <option value="">Select Column</option>
          <option value="fullName" ${col==="fullName"?"selected":""}>Name</option>
          <option value="email" ${col==="email"?"selected":""}>Email</option>
          <option value="phone" ${col==="phone"?"selected":""}>Phone</option>
          <option value="subject" ${col==="subject"?"selected":""}>Subject</option>
          <option value="message" ${col==="message"?"selected":""}>Message</option>
          <option value="date" ${col==="date"?"selected":""}>Date</option>
        </select>
        <select class="filter-relation" style="flex:1; padding:6px;">
          <option value="equals" ${rel==="equals"?"selected":""}>Equals</option>
          <option value="contains" ${rel==="contains"?"selected":""}>Contains</option>
          <option value="starts" ${rel==="starts"?"selected":""}>Starts With</option>
          <option value="ends" ${rel==="ends"?"selected":""}>Ends With</option>
        </select>
        <input type="text" class="filter-value" placeholder="Enter Value" value="${val}" style="flex:1; padding:6px;" />
        <button class="delete-filter" style="border:none;background:none;cursor:pointer;">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M9 3V4H4V6H5V19C5 19.5304 5.21071 20.0391 5.58579 20.4142C5.96086 20.7893 6.46957 21 7 21H17C17.5304 21 18.0391 20.7893 18.4142 20.4142C18.7893 20.0391 19 19.5304 19 19V6H20V4H15V3H9ZM7 6H17V19H7V6ZM9 8V17H11V8H9ZM13 8V17H15V8H13Z" fill="#A10900"/>
            </svg>
        </button>
      `;

      row.querySelector(".delete-filter").addEventListener("click", () => row.remove());
      filterBody.appendChild(row);
    }

    addBtn.addEventListener("click", () => addFilterRow());

    // Preload filters from URL
    const existingFilters = parseFiltersFromURL();
    if (existingFilters.length) {
      filterBody.innerHTML = "";
      existingFilters.forEach(f => addFilterRow(f.column, f.relation, f.value));
    } else {
      addFilterRow();
    }

    // Reset action â€” clear URL filters and re-render
    document.getElementById("reset-filter").addEventListener("click", () => {
      filterBody.innerHTML = "";
      const newParams = new URLSearchParams(window.location.search);
      newParams.delete("filters");
      // keep other params (like sortBy)
      const qs = newParams.toString();
      window.history.pushState({}, "", qs ? `${window.location.pathname}?${qs}` : window.location.pathname);
      reRenderFromParams();
      // close modal if your closeModal supports no-args; otherwise hide universal modal
      try { closeModal(); } catch (e) {
        const um = document.getElementById("universal-modal"); if (um) um.style.display = "none";
      }
    });

    // Submit action â€” write filters into URL and re-render (keeping other params)
    document.getElementById("submit-filter").addEventListener("click", () => {
      const rows = [...filterBody.querySelectorAll(".filter-row")];
      const filters = rows.map(row => {
        const col = row.querySelector(".filter-column").value;
        const rel = row.querySelector(".filter-relation").value;
        const val = row.querySelector(".filter-value").value.trim();
        return col && rel && val ? `${col}:${rel}:${encodeURIComponent(val)}` : null;
      }).filter(Boolean);

      const newParams = new URLSearchParams(window.location.search);
      if (filters.length) newParams.set("filters", filters.join(","));
      else newParams.delete("filters");

      const qs = newParams.toString();
      window.history.pushState({}, "", qs ? `${window.location.pathname}?${qs}` : window.location.pathname);

      reRenderFromParams();

      try { closeModal(); } catch (e) {
        const um = document.getElementById("universal-modal"); if (um) um.style.display = "none";
      }
    });

  }); 


  reRenderFromParams();
});
